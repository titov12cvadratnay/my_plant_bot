from telebot import TeleBot, types
import sqlite3
import random
import threading
import time
import schedule

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram API, SQLite –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö, –ø–æ—Ç–æ–∫–∞–º–∏ –∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è–º–∏.

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –±–µ—Ä—ë—Ç—Å—è –∏–∑ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ Telegram @BotFather
bot = TeleBot('–í–ê–®_–¢–û–ö–ï–ù_–ë–û–¢–ê')

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö SQLite
connection = sqlite3.connect('plant.db', check_same_thread=False)
cursor = connection.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ (—Ä–∞—Å—Ç–µ–Ω–∏–π)
cursor.execute('''
    CREATE TABLE IF NOT EXISTS plants (
        id INTEGER PRIMARY KEY AUTOINCREMENT,      -- –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–ø–∏—Å–∏
        user_id INTEGER NOT NULL,                 -- –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
        water INTEGER DEFAULT 50,                 -- –ü–æ–∫–∞–∑–∞—Ç–µ–ª—å —É—Ä–æ–≤–Ω—è –≤–æ–¥—ã (–æ—Ç 0 –¥–æ 100%)
        level INTEGER DEFAULT 1,                  -- –¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å —Ä–∞–∑–≤–∏—Ç–∏—è —Ä–∞—Å—Ç–µ–Ω–∏—è
        points INTEGER DEFAULT 50,                -- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–≤—ã—Ö –º–æ–Ω–µ—Ç
        mood INTEGER DEFAULT 50,                  -- –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è (—á–µ–º –≤—ã—à–µ, —Ç–µ–º –±—ã—Å—Ç—Ä–µ–µ —Ä–æ—Å—Ç)
        scin INTEGER DEFAULT 1,                   -- –ù–æ–º–µ—Ä –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–∫–∏–Ω–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞ —Ä–∞—Å—Ç–µ–Ω–∏—è
        scin_all INTEGER DEFAULT 1                -- –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∫–∏–Ω–æ–≤ –¥–ª—è —Ä–∞—Å—Ç–µ–Ω–∏—è
    )
''')

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–µ–Ω—é –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –æ—Å–Ω–æ–≤–Ω—ã–º –¥–µ–π—Å—Ç–≤–∏—è–º
def generate_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn_dog = types.KeyboardButton('/dog')     # –ö–æ–º–∞–Ω–¥–∞ –ø–æ–∏—Å–∫–∞ –º–æ–Ω–µ—Ç —Å–æ–±–∞–∫–æ–π
    btn_water = types.KeyboardButton('/water')  # –ö–æ–º–∞–Ω–¥–∞ –ø–æ–ª–∏–≤–∞ —Ä–∞—Å—Ç–µ–Ω–∏—è
    btn_shop = types.KeyboardButton('/shop')    # –ú–∞–≥–∞–∑–∏–Ω –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    btn_status = types.KeyboardButton('/status') # –°—Ç–∞—Ç—É—Å —Ä–∞—Å—Ç–µ–Ω–∏—è
    btn_help = types.KeyboardButton('/help')    # –°–ø—Ä–∞–≤–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    btn_f = types.KeyboardButton('/flowers')    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–Ω–µ—à–Ω–æ—Å—Ç—å—é —Ä–∞—Å—Ç–µ–Ω–∏—è
    btn_mail = types.KeyboardButton('/mail')    # –û—Ç–ø—Ä–∞–≤–∫–∞ –º–æ–Ω–µ—Ç –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    markup.row(btn_help, btn_status, btn_mail)
    markup.row(btn_shop, btn_dog, btn_water)
    markup.row(btn_f)
    return markup

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–µ–Ω—é –º–∞–≥–∞–∑–∏–Ω–∞
def shop_menu():
    inline_menu_markup = types.InlineKeyboardMarkup(row_width=2)
    button1 = types.InlineKeyboardButton("–°–º–æ—Ç—Ä–∏—Ç–µ —Ä–∞–¥—É–≥–∞üåà 25$", callback_data="Rainbow_ray") 
    button2 = types.InlineKeyboardButton("–°–æ–ª–Ω–µ—á–Ω—ã–π —É–¥–∞—Ä‚òÄ 25$", callback_data="Sunstroke") 
    button3 = types.InlineKeyboardButton("–¢—ë–ø–ª—ã–π –¥–æ–∂–¥—å‚òî 25$", callback_data="Warm_Rain") 
    button4 = types.InlineKeyboardButton("VIP —Å–æ–ª–Ω—Ü–µ ‚òÄ‚òÄ 99$", callback_data="VIP") 
    inline_menu_markup.add(button1) 
    inline_menu_markup.add(button2) 
    inline_menu_markup.add(button3) 
    inline_menu_markup.add(button4) 
    return inline_menu_markup

# –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
def you_user(user_id):
    cursor.execute('''SELECT COUNT(*) FROM plants WHERE user_id=?''', (user_id,))
    count = cursor.fetchone()[0]
    return bool(count)

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def welcome_user(user_id):
    cursor.execute(
        '''INSERT INTO plants (user_id, water, level, points, mood, scin, scin_all) VALUES (?, ?, ?, ?, ?, ?, ?)''',
        (user_id, 50, 1, 50, 50, 1, 1)  
    )

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def data_select(user_id):
    cursor.execute('''SELECT id, user_id, water, level, points, mood FROM plants WHERE user_id=?''', (user_id,))
    result = cursor.fetchone()      
    if result is None:
        return "–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω." 
    columns = ['id', 'user_id', 'water', 'level', 'points', 'mood']
    data = dict(zip(columns, result))
    return data

# –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –∑–∞—â–∏—Ç–æ–π –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db_lock = threading.Lock()
executor = ThreadPoolExecutor(max_workers=5)

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
def data_update(water, level, points, mood, plant_id):
    with db_lock:
        cursor.execute("UPDATE plants SET water=?, level=?, points=?, mood=? WHERE id=?", (water, level, points, mood, plant_id,))
        connection.commit()

# –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
def send_notification(chat_id, notification):
    executor.submit(bot.send_message, chat_id, notification)

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —É—Ä–æ–∂–∞—è —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏
def harvest_fruits():
    cursor.execute("SELECT id, user_id, level, mood FROM plants")
    all_users = cursor.fetchall()

    for row in all_users:
        plant_id, user_id, level, mood = row
        fruits_collected = level  
        coins_per_fruit = 50  
        total_coins = fruits_collected * coins_per_fruit
        if mood > 0:
            total_coins = total_coins * 2
            new_level = level + 2 
            total_scins = 2
            bot.send_message(user_id, "üåΩ –£—Ä–∞! –¢–≤–æ—ë —Ä–∞—Å—Ç–µ–Ω–∏–µ –≤ —Ö–æ—Ä–æ—à–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏, –ø–æ—ç—Ç–æ–º—É —É—Ä–æ–≤–µ–Ω—å —É–≤–µ–ª–∏—á–∏–ª—Å—è –≤–¥–≤–æ–µ! –ò —É —Ç–µ–±—è –Ω–æ–≤—ã–π —Ü–≤–µ—Ç–æ–∫ üåæ")
            cursor.execute("UPDATE plants SET scin_all=scin_all+? WHERE id=?", (total_scins ,plant_id))
        else:
            new_level = level + 1  

        cursor.execute("UPDATE plants SET level=?, points=points+? WHERE id=?", (new_level, total_coins, plant_id))
        connection.commit()

        bot.send_message(user_id, f"üåΩ –£—Ä–∞! –ü—Ä–∏—à–ª–æ –≤—Ä–µ–º—è —Å–æ–±–∏—Ä–∞—Ç—å —É—Ä–æ–∂–∞–π! üåæ\n–í—ã —Å–æ–±—Ä–∞–ª–∏ {fruits_collected} –ø–ª–æ–¥–æ–≤ –∏ –ø–æ–ª—É—á–∏–ª–∏ {total_coins} –º–æ–Ω–µ—Ç. üí∞\n–í–∞—à —É—Ä–æ–≤–µ–Ω—å –≤—ã—Ä–æ—Å –¥–æ {new_level}.")

# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Å–±–æ—Ä–∞ —É—Ä–æ–∂–∞—è
schedule.every().day.at("09:59").do(harvest_fruits)

# –ü–æ—Ç–æ–∫–æ–≤–∞—è —Ä–∞–±–æ—Ç–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
def run_scheduler():
    while True:
        schedule.run_pending()
        time.sleep(1)

scheduler_thread = threading.Thread(target=run_scheduler)
scheduler_thread.daemon = True
scheduler_thread.start()

# –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞—Å—Ç–µ–Ω–∏—è
def update_plant_data(chat_id):
    global timer 
    data = data_select(chat_id)
    water = data['water']
    mood = data['mood']

    new_water_ = max(water - 1, 0)  
    new_mood_ = max(mood - 30, 0)  

    data_update(new_water_, data["level"], data["points"], new_mood_, data["id"])

    if new_water_ <= 10 or new_mood_ <= 10:
        alert_text = "‚ùó –í–∞—à–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ –Ω—É–∂–¥–∞–µ—Ç—Å—è –≤ —É—Ö–æ–¥–µ! –ê —Ç–æ –æ–Ω–æ –∑–∞–≤—è–Ω–µ—Çü•Ä \nüí¶ –í–æ–¥–∞: {}%, üé≠ –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {}%".format(new_water_, new_mood_)
        bot.send_message(chat_id, alert_text)

    if new_water_ <= 1 :
        cursor.execute("DELETE FROM plants WHERE user_id=?", (chat_id,))
        connection.commit()
        bot.send_message(chat_id, text="–í–∞—à–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ —É—Ö–æ–¥–∏—Ç –æ—Ç –≤–∞—Å –≤ –¥–∞–ª—ë–∫—É—é —Å—Ç—Ä–∞–Ω—É —Ä–∞—Å—Ç–µ–Ω–∏–πüòÄ")
        timer.cancel()

    timer = threading.Timer(60*20, update_plant_data, args=(chat_id,))
    timer.start()

# –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞—Å—Ç–µ–Ω–∏—è
def start_update_timer(chat_id):
    update_plant_data(chat_id)

# –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∫–∏–Ω–æ–≤
def plant_all_s(plant_id):
    cursor.execute('''SELECT scin_all FROM plants WHERE user_id=?''', (plant_id,))
    result = cursor.fetchone()  
    connection.commit()
    if result:
        return result[0]
    return 0 

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞ —Ä–∞—Å—Ç–µ–Ω–∏—è –ø–æ –Ω–æ–º–µ—Ä—É —Å–∫–∏–Ω–∞
def plant_p(plant_id):
    cursor.execute('''SELECT scin FROM plants WHERE user_id=?''', (plant_id,))
    numb = cursor.fetchone()  
    connection.commit()
    if numb and numb[0] == 1:
        return "URL_–°–ö–ò–ù–ê_1"
    elif numb and numb[0] == 2:
        return "URL_–°–ö–ò–ù–ê_2"
    elif numb and numb[0] == 3:
        return "URL_–°–ö–ò–ù–ê_3"
    elif numb and numb[0] == 4:
        return "URL_–°–ö–ò–ù–ê_4"
    else:
        return "DEFAULT_URL_–°–ö–ò–ù"

# –ù–∞–∑–≤–∞–Ω–∏–µ —Å–∫–∏–Ω–∞ –ø–æ –µ–≥–æ –Ω–æ–º–µ—Ä—É
def plant_s(plant_id):
    cursor.execute('''SELECT scin FROM plants WHERE user_id=?''', (plant_id,))
    numb = cursor.fetchone()     
    connection.commit()
    if numb and numb[0] == 1:
        return "–¶–≤–µ—Ç–æ–∫üåº"
    elif numb and numb[0] == 2:
        return "–£–ª—ã–±–∞—à–∫–∞ü§£"
    elif numb and numb[0] == 3:
        return "–ó–µ–ª—ë–Ω—ã–πüåø"
    elif numb and numb[0] == 4:
        return "–£–∂–∞—Å–Ω—ã–πüòàüõë"
    else:
        return "–¢–∞–∫–æ–≥–æ —Å–∫–∏–Ω–∞ –Ω–µ—Ç –≤ –∏–≥—Ä–µ"

# –ü–µ—Ä–≤–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –±–æ—Ç (/start)
@bot.message_handler(commands=['start'])
def welcome(message):
    markup = generate_menu()
    chat_id = message.chat.id
    markup = generate_menu() 
    
    if not you_user(chat_id):
        welcome_user(chat_id)
        response_text = f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Plants lite ü§©! –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –≠—Ç–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª https://t.me/+l9RHgfjX-Y1kZTVi /help - —ç—Ç–æ –ø–æ–º–æ—â—å"
    else:
        response_text = f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–ºü§©!"

    start_update_timer(chat_id)
    bot.send_photo(chat_id=chat_id, photo='DEFAULT_PHOTO_URL',caption=response_text, reply_markup=markup)
    bot.send_sticker(chat_id, "STICKER_ID")

# –°–ø—Ä–∞–≤–æ—á–Ω—ã–π —Ä–∞–∑–¥–µ–ª (/help)
@bot.message_handler(commands=['help'])
def help(message):
    markup = generate_menu()
    chat_id = message.chat.id
    text_help = (   
        '–°–ø—Ä–∞–≤–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∞–≤–∏–ª–∞—Ö –∏–≥—Ä—ã –∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥–∞—Ö.'
    )
    bot.send_message(chat_id=chat_id, text=text_help, reply_markup=markup )
    bot.send_sticker(chat_id, "STICKER_ID")

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ —Ä–∞—Å—Ç–µ–Ω–∏—è (/status)
@bot.message_handler(commands=['status'])
def status_command (message):
    chat_id = message.chat.id
    data_dict = data_select(chat_id)
    markup = generate_menu()
    photo = plant_p(chat_id)
    scin = plant_s(chat_id)
    text_status = (
    f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º —Ä–∞—Å—Ç–µ–Ω–∏–∏."
    )
    bot.send_message(chat_id=chat_id, text=text_status, reply_markup=markup )
    bot.send_sticker(chat_id, "STICKER_ID")
    level = int(data_dict['level'])  
    markup = generate_menu()
    bot.send_photo(
        chat_id=chat_id,
        photo=photo,
        caption=f"–¶–≤–µ—Ç–æ–∫ {scin} –£—Ä.{level}üéá",
        reply_markup=markup
    )

# –†–µ–∞–∫—Ü–∏—è –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å—Ç–∏–∫–µ—Ä–æ–≤
@bot.message_handler(content_types=['sticker'])
def handle_sticker(message):
    chat_id = message.chat.id
    random_stiker = [
        'LIST_OF_STICKERS'
    ]
    selected_sticker = random.choice(random_stiker)
    bot.send_sticker(chat_id, selected_sticker)

# –ü–æ—Å—ã–ª–∫–∞ –ø–æ–¥–∞—Ä–∫–∞ –º–æ–Ω–µ—Ç–∞–º–∏ –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
USER_STATES_1 = {}

@bot.message_handler(commands=['mail'])
def mail(message):
    chat_id = message.chat.id
    data = data_select(chat_id)  
    USER_STATES_1[chat_id] = "mail"  
    bot.send_message(chat_id, f"–£ –≤–∞—Å {data['points']} –º–æ–Ω–µ—Ç–æ–∫ üòÄ \n–•–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–Ω–µ—Ç–∫–∏ –ø–æ ID( ID –Ω–µ —Ä–∞—Å—Ç–µ–Ω–∏—è ).\n–í–æ—Ç –∫–∞–∫ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å –Ω–∞–ø—Ä–∏–º–µ—Ä :(1)ü§©")
    bot.send_sticker(chat_id, "STICKER_ID")

@bot.message_handler(func=lambda message: USER_STATES_1.get(message.chat.id) == "mail")
def mail_points(message):
    chat_id = message.chat.id
    del USER_STATES_1[chat_id]  
    data = data_select(chat_id) 
    text = message.text.strip().lower()
    points_str = str(data['points']) 
    points = int(points_str)
    if points >= 50 : 
        try:
            update_points = data['points'] - 50  
            data_update(data["water"], data["level"], update_points, data['mood'], data["id"])  
            cursor.execute("UPDATE plants SET points=points+50 WHERE id=?", (text,))  
            cursor.execute('''SELECT user_id FROM plants WHERE id=?''', (text,))
            id = cursor.fetchone()
            connection.commit()
            bot.send_sticker(chat_id, "STICKER_ID")
            bot.send_message(chat_id, f"ü§©ü§©–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –º–æ–Ω–µ—Ç–∫–∏ !üòÄü§©")
            bot.send_message(id, f"ü§©ü§©–£ –≤–∞—Å {update_points} –º–æ–Ω–µ—Ç–æ–∫ . –ö—Ç–æ-—Ç–æ –ø–æ–¥–∞—Ä–∏–ª –≤–∞–º 50 –º–æ–Ω–µ—Ç–æ–∫ !üòÄü§©")
        except Exception as e:
            print(e)  

# –ö–æ–º–∞–Ω–¥–∞ –ø–æ–ª–∏–≤–∞ —Ä–∞—Å—Ç–µ–Ω–∏—è (/water)
@bot.message_handler(commands=['water'])
def water(message):
    markup = generate_menu()
    chat_id = message.chat.id
    data = data_select(chat_id)

    if isinstance(data, str):
        bot.send_message(chat_id=chat_id, text=data, reply_markup=markup)
        return

    current_water = data["water"]
    bot.send_message(chat_id=chat_id, text=f"–£—Ä–æ–≤–µ–Ω—å –≤–æ–¥—ã –≤ —Ä–∞—Å—Ç–µ–Ω–∏–∏ {current_water}%üíßüòÄ", reply_markup=markup)

    if current_water == 100:
        bot.send_message(chat_id=chat_id, text=f"–í–∞—à–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ –Ω–µ –Ω—É–∂–¥–∞–µ—Ç—Å—è –≤ –≤–æ–¥–µüòÄüåº", reply_markup=markup)
    else:
        updated_water = 100
        data_update(updated_water, data["level"], data["points"], data["mood"], data["id"])
        bot.send_message(chat_id=chat_id, text=f"–£—Ä–æ–≤–µ–Ω—å –≤–æ–¥—ã –≤ —Ä–∞—Å—Ç–µ–Ω–∏–∏ –ø–æ–ø–æ–ª–Ω–µ–Ωüåº {updated_water}%üíßüòÄ", reply_markup=markup)

# –û—Ç–∫—Ä—ã—Ç–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞ (/shop)
@bot.message_handler(commands=['shop'])
def shop (message):
    chat_id = message.chat.id
    data = data_select(chat_id)
    current_point = data["points"]
    bot.send_message(chat_id=chat_id, text=f"–£ –≤–∞—Å {current_point}üí∞ –º–æ–Ω–µ—Ç üòÄ \n–£ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ —Å–≤–æ—ë —Å–≤–æ–π—Å—Ç–≤–æ ü§©\n–í–æ—Ç –≤–µ—Å—å –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—ÇüëÅ‚Äçüó®", reply_markup=shop_menu())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ –≤ –º–∞–≥–∞–∑–∏–Ω–µ
@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    chat_id = call.message.chat.id
    data_shop = call.data
    data = data_select(chat_id)
    current_point = data["points"]
    current_mood = data["mood"]
    update_mood = current_mood

    if current_point >= 25:
        lock.acquire() 

        try:

            if data_shop == "Rainbow_ray":
                update_mood = 80
                shop1(chat_id)
            elif data_shop == "Warm_Rain":
                update_mood = 81
                shop3(chat_id)
            elif data_shop == "Sunstroke":
                update_mood = 80
                shop2(chat_id)
            elif data_shop == "VIP":
                if current_point >= 99:
                    update_mood = 99
                    update_point = current_point - 74
                    shop4(chat_id)
                else:
                    bot.edit_message_text(chat_id=chat_id, message_id=call.message.message_id, text="–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç–æ–∫ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ üåº!")
                    bot.send_sticker(chat_id, "STICKER_ID")

            bot.edit_message_text(chat_id=chat_id, message_id=call.message.message_id, text="–ü–æ–¥–æ–∂–¥–∏—Ç–µ –ø–æ–∫—É–ø–∫–∞ —Å–æ–≤–µ—Ä—à–∞–µ—Ç—Å—è üåº!")
            update_point = current_point - 25
            data_update(data["water"], data["level"], update_point, update_mood, data["id"])
            
        finally:
            lock.release()  
    else:
        bot.edit_message_text(chat_id=chat_id, message_id=call.message.message_id, text="–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç–æ–∫ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ üåº!")
        bot.send_sticker(chat_id, "STICKER_ID")

# –§—É–Ω–∫—Ü–∏–∏ –ø–æ–∫–∞–∑–∞ –∞–Ω–∏–º–∞—Ü–∏–π –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ —Ç–æ–≤–∞—Ä–æ–≤
def shop1(chat_id):
    bot.send_message(chat_id=chat_id, text="–í—ã –∫—É–ø–∏–ª–∏ —Ä–∞–¥—É–≥—É! üåà")
    bot.send_animation(chat_id, animation='ANIMATION_URL', caption='–Ø –†–ê–î–£–ì–ê')
def shop3(chat_id):
    bot.send_message(chat_id=chat_id, text="–í—ã –∫—É–ø–∏–ª–∏ –¥–æ–∂–¥–∏–∫! üåßÔ∏è")
    bot.send_animation(chat_id, animation='ANIMATION_URL', caption="–î–æ–∂–¥–∏–∫ !")
def shop2(chat_id):
    bot.send_message(chat_id=chat_id, text="–í—ã –∫—É–ø–∏–ª–∏ —Å–æ–ª–Ω–µ—á–Ω—ã–π —Å–≤–µ—Ç! ‚òÄÔ∏è")
    bot.send_animation(chat_id, animation='ANIMATION_URL', caption='–≠–π —Ö–æ—á–µ—à—å –∫–æ–Ω—Ñ–µ—Ç–∫—É...')
def shop4(chat_id):
    bot.send_photo(
        chat_id=chat_id,
        photo='PHOTO_URL',
        caption=f"–í–∞—à–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ –ø–æ–ª—É—á–∏–ª–æ —Å–æ–ª–Ω—Ü–µ‚òÄÔ∏è"
    )

# –°–∏—Å—Ç–µ–º–∞ —Å–º–µ–Ω—ã –≤–Ω–µ—à–Ω–æ—Å—Ç–∏ —Ä–∞—Å—Ç–µ–Ω–∏—è (/flowers)
USER_STATES = {}

@bot.message_handler(commands=['flowers'])
def scins(message):
    chat_id = message.chat.id
    scins = plant_all_s(chat_id)
    USER_STATES[chat_id] = "choosing_scin"  
    bot.send_message(chat_id, f"–£ –≤–∞—Å {scins} —Å–∫–∏–Ω–æ–≤ –Ω–∞ —Ü–≤–µ—Ç–æ—á–µ–∫ üéÄüòÄ \n–ê —Ç–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–∫–∏–Ω–∞ –≤–æ—Ç —Ç–∞–∫ (—Ü–≤–µ—Ç–æ–∫ 1)ü§©")
    bot.send_sticker(chat_id, "CAACAgIAAxkBAAEOhPhoKrWcqHEvkRW0fPXwGW7xF350MwACrgEAAladvQqAXIyr2L0TUjYE")

@bot.message_handler(func=lambda message: USER_STATES.get(message.chat.id) == "choosing_scin")
def choose_scin(message):
    chat_id = message.chat.id
    del USER_STATES[chat_id]  
    text = message.text.strip().lower()
    scin_all = plant_all_s(chat_id)

    if text.startswith("—Ü–≤–µ—Ç–æ–∫"): 
        parts = text.split()  
        if len(parts) > 1: 
            try:
                chosen_number = int(parts[1])  
                if chosen_number <= scin_all:
                    scining = chosen_number
                    bot.send_message(chat_id, f"–í—ã–±—Ä–∞–Ω —Å–∫–∏–Ω ‚Ññ{scining}, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ...")
                    cursor.execute("UPDATE plants SET scin=? WHERE user_id=?", (scining, chat_id,))
                    connection.commit()  
                    
                    cursor.execute('''SELECT scin FROM plants WHERE user_id=?''', (chat_id,))
                    result = cursor.fetchone()  
                    
                    photo = plant_p(chat_id)
                    bot.send_photo(chat_id, photo, caption=f"–ö—Ä–∞—Å–æ—Ç–∞ ‚òÄÔ∏è ")
                    
                    bot.send_message(chat_id, f"–í–´–ë–†–ê–õ–ò {chosen_number}-–π —Å–∫–∏–Ω! üéÄ")
                else:
                    bot.send_message(chat_id, f"–ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–∫–∏–Ω–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞.")
            except ValueError:
                bot.send_message(chat_id, "–ù–æ–º–µ—Ä —Å–∫–∏–Ω–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        else:
            bot.send_message(chat_id, "–í—ã –∑–∞–±—ã–ª–∏ —É–∫–∞–∑–∞—Ç—å –Ω–æ–º–µ—Ä —Å–∫–∏–Ω–∞ –ø–æ—Å–ª–µ —Å–ª–æ–≤–∞ \"—Ü–≤–µ—Ç–æ–∫\". –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    else:
        bot.send_message(chat_id, f"–ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–∞–º –¥–æ—Å—Ç—É–ø–Ω–æ {scin_all} —Å–∫–∏–Ω–æ–≤ –Ω–∞ —Ü–≤–µ—Ç–æ—á–µ–∫ üéÄ. –í—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –Ω–∏—Ö, –Ω–∞–ø—Ä–∏–º–µ—Ä, –≤–æ—Ç —Ç–∞–∫ (—Ü–≤–µ—Ç–æ–∫ 1) –∏–ª–∏ (—Ü–≤–µ—Ç–æ–∫ 2)")

@bot.message_handler(commands=['dog']) #—Å–ª—É—á–∞–π–Ω—ã–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫ –º–æ–Ω–µ—Ç
def dog (message):
    chat_id = message.chat.id
    data = data_select(chat_id)
    bot.send_message(chat_id=chat_id, text="–¢—ã –ø–æ–∑–≤–∞–ª —Å–≤–æ—é —Å–æ–±–∞–∫—É üêï\n –¢–≤–æ—è —Å–æ–±–∞–∫–∞ –º–æ–∂–µ—Ç –Ω–∞–π—Ç–∏ –º–æ–Ω–µ—Ç–∫–∏  üí™.–≠—Ç–æ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —É–¥–∞—á–∏ ,üçÄ—à–∞–Ω—Å —á—Ç–æ —Ç–≤–æ—è —Å–æ–±–∞–∫–∞ –Ω–∞–π–¥—ë—Ç –º–æ–Ω–µ—Ç–∫–∏ —Ä–∞–≤–Ω–∞ 30%ü§£.\n –ü–æ–¥–æ–∂–¥–∏—Ç–µ 30 —Å–µ–∫—É–Ω–¥")
    bot.send_sticker(chat_id, "CAACAgIAAxkBAAEOggxoKBlCBwskPv-HJuXxx9ysWTUtIAACXgADrWW8FLy_0yJMyvjLNgQ")
    lock.acquire() 

    try:
        dog_points = random.randint(0, 10)
        current_point = data["points"]
        time.sleep(30)
        if dog_points > 6:
            update_points2 = current_point + 15
            bot.send_message(chat_id=chat_id, text="–í–∞—à–∞ —Å–æ–±–∞–∫–∞ ... \n\n–ù–ê–®–õ–ê –ú–û–ù–ï–¢–ö–òüîé  –≤–∞–º –ø—Ä–∏–±–∞–≤–∏–ª–æ—Å—å 15+ –º.")
            bot.send_animation(chat_id, animation='https://telepot.ru/images/stickers_img/dae260ddf9.gif', caption="–£–†–ê !")
        else:
            update_points2 = current_point 
            bot.send_message(chat_id=chat_id, text="–í–∞—à–∞ —Å–æ–±–∞–∫–∞ ... \n\n–ù–ï –ù–ê–®–õ–ê –ú–û–ù–ï–¢–ö–òüîé  –≤–∞–º –ø—Ä–∏–±–∞–≤–∏–ª–æ—Å—å 0+ –º.üåßÔ∏è")
            bot.send_animation(chat_id, animation='https://media.tenor.com/9sPQlkbGzDQAAAAC/sad-emote.gif', caption="–ù–µ—Ç !")
        data_update(data["water"], data["level"], update_points2, data["mood"], data["id"])
    finally:
        lock.release()
    
if __name__ == '__main__':#–∑–∞–ø—É–∫—Å —Ü–∏–∫–ª–∞
    bot.infinity_polling()    
