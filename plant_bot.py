from telebot import TeleBot, types
import sqlite3
import random
import threading
import time
import schedule

bot = TeleBot('7711021224:AAG-Hg2FiNxMuqc2jMWlwmok4nqyNcqjzyk')

connection = sqlite3.connect('plant.db', check_same_thread=False)
cursor = connection.cursor()

cursor.execute('''
    CREATE TABLE IF NOT EXISTS plants (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER NOT NULL,
        water INTEGER DEFAULT 50,
        level INTEGER DEFAULT 1,
        points INTEGER DEFAULT 50,
        mood INTEGER DEFAULT 50,
        scin INTEGER DEFAULT 1,
        scin_all INTEGER DEFAULT 1
    )
''')

import os
from flask import Flask

app = Flask(__name__)

@app.route('/ping')
def ping():
    return 'OK', 200

if __name__ == '__main__':
    app.run(debug=False, host='0.0.0.0', port=int(os.environ.get('PORT', 5000)))
def generate_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn_dog = types.KeyboardButton('/dog')
    btn_water = types.KeyboardButton('/water')
    btn_shop = types.KeyboardButton('/shop')
    btn_status = types.KeyboardButton('/status')
    btn_help = types.KeyboardButton('/help')
    btn_f = types.KeyboardButton('/flowers')
    markup.row(btn_dog, btn_water)
    markup.row(btn_shop, btn_f)
    markup.row(btn_status, btn_help)
    return markup

def shop_menu():
    inline_menu_markup = types.InlineKeyboardMarkup(row_width=2)
    button1 = types.InlineKeyboardButton("–°–º–æ—Ç—Ä–∏—Ç–µ —Ä–∞–¥—É–≥–∞üåà 25$", callback_data="Rainbow_ray") 
    button2 = types.InlineKeyboardButton("–°–æ–ª–Ω–µ—á–Ω—ã–π —É–¥–∞—Ä‚òÄ 25$", callback_data="Sunstroke") 
    button3 = types.InlineKeyboardButton("–¢—ë–ø–ª—ã–π –¥–æ–∂–¥—å‚òî 25$", callback_data="Warm_Rain") 
    button4 = types.InlineKeyboardButton("VIP —Å–æ–ª–Ω—Ü–µ ‚òÄ‚òÄ 99$", callback_data="VIP") 
    inline_menu_markup.add(button1) 
    inline_menu_markup.add(button2) 
    inline_menu_markup.add(button3) 
    inline_menu_markup.add(button4) 
    return inline_menu_markup

def you_user(user_id):
    cursor.execute('''SELECT COUNT(*) FROM plants WHERE user_id=?''', (user_id,))
    count = cursor.fetchone()[0]
    return bool(count)

def welcome_user(user_id):
    cursor.execute(
        '''INSERT INTO plants (user_id, water, level, points, mood, scin, scin_all) VALUES (?, ?, ?, ?, ?, ?, ?)''',
        (user_id, 50, 1, 50, 50, 1, 1)  
    )

def data_select(user_id):
    cursor.execute('''SELECT id, user_id, water, level, points, mood FROM plants WHERE user_id=?''', (user_id,))
    result = cursor.fetchone()      
    if result is None:
        return "–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω." 
    columns = ['id', 'user_id', 'water', 'level', 'points', 'mood']
    default_values = [None]*len(columns)
    data = dict(zip(columns, result + tuple(default_values[len(result)-len(columns):])))
   
    columns = ['id', 'user_id', 'water', 'level', 'points', 'mood']
    data = dict(zip(columns, result))
    return data

import threading
from concurrent.futures import ThreadPoolExecutor

db_lock = threading.Lock()
executor = ThreadPoolExecutor(max_workers=5)

def data_update(water, level, points, mood, plant_id):
    with db_lock:
        cursor.execute("UPDATE plants SET water=?, level=?, points=?, mood=? WHERE id=?", (water, level, points, mood, plant_id,))
        connection.commit()

def send_notification(chat_id, notification):
    executor.submit(bot.send_message, chat_id, notification)


def harvest_fruits():
    cursor.execute("SELECT id, user_id, level, mood FROM plants")
    all_users = cursor.fetchall()

    for row in all_users:
        plant_id, user_id, level, mood = row
        fruits_collected = level  
        coins_per_fruit = 50  
        total_coins = fruits_collected * coins_per_fruit
        if mood > 0:
            total_coins = total_coins * 2
            new_level = level + 2 
            total_scins = 2
            bot.send_message(user_id, "üåΩ –£—Ä–∞! –¢–≤–æ—ë —Ä–∞—Å—Ç–µ–Ω–∏–µ –≤ —Ö–æ—Ä–æ—à–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏, –ø–æ—ç—Ç–æ–º—É —É—Ä–æ–≤–µ–Ω—å —É–≤–µ–ª–∏—á–∏–ª—Å—è –≤–¥–≤–æ–µ! –ò —É —Ç–µ–±—è –Ω–æ–≤—ã–π —Ü–≤–µ—Ç–æ–∫ üåæ")
            cursor.execute("UPDATE plants SET scin_all=scin_all+? WHERE id=?", (total_scins ,plant_id))
        else:
            new_level = level + 1  

        cursor.execute("UPDATE plants SET level=?, points=points+? WHERE id=?", (new_level, total_coins, plant_id))
        connection.commit()

        bot.send_message(user_id, f"üåΩ –£—Ä–∞! –ü—Ä–∏—à–ª–æ –≤—Ä–µ–º—è —Å–æ–±–∏—Ä–∞—Ç—å —É—Ä–æ–∂–∞–π! üåæ\n–í—ã —Å–æ–±—Ä–∞–ª–∏ {fruits_collected} –ø–ª–æ–¥–æ–≤ –∏ –ø–æ–ª—É—á–∏–ª–∏ {total_coins} –º–æ–Ω–µ—Ç. üí∞\n–í–∞—à —É—Ä–æ–≤–µ–Ω—å –≤—ã—Ä–æ—Å –¥–æ {new_level}.")

schedule.every().day.at("12:59").do(harvest_fruits)

def run_scheduler():
    while True:
        schedule.run_pending()
        time.sleep(1)

scheduler_thread = threading.Thread(target=run_scheduler)
scheduler_thread.daemon = True
scheduler_thread.start()

def update_plant_data(chat_id):
    global timer 
    data = data_select(chat_id)
    water = data['water']
    mood = data['mood']

    new_water_ = max(water - 1, 0)  
    new_mood_ = max(mood - 30, 0)  

    data_update(new_water_, data["level"], data["points"], new_mood_, data["id"])

    if new_water_ <= 10 or new_mood_ <= 10:
        alert_text = "‚ùó –í–∞—à–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ –Ω—É–∂–¥–∞–µ—Ç—Å—è –≤ —É—Ö–æ–¥–µ! –ê —Ç–æ –æ–Ω–æ –∑–∞–≤—è–Ω–µ—Çü•Ä \nüí¶ –í–æ–¥–∞: {}%, üé≠ –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {}%".format(new_water_, new_mood_)
        bot.send_message(chat_id, alert_text)

    if new_water_ <= 1 :
        cursor.execute("DELETE FROM plants WHERE user_id=?", (chat_id,))
        bot.send_message(chat_id, text="–í–∞—à–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ —É—Ö–æ–¥–∏—Ç –æ—Ç –≤–∞—Å –≤ –¥–∞–ª—ë–∫—É—é —Å—Ç—Ä–∞–Ω—É —Ä–∞—Å—Ç–µ–Ω–∏–πüòÄ")
        timer.cancel()

    timer = threading.Timer(60*20, update_plant_data, args=(chat_id,))
    timer.start()

def start_update_timer(chat_id):
    update_plant_data(chat_id)

def plant_all_s(plant_id):
    cursor.execute('''SELECT scin_all FROM plants WHERE user_id=?''', (plant_id,))
    result = cursor.fetchone()  
    connection.commit()
    if result:
        return result[0]
    return 0 


def plant_p(plant_id):
    cursor.execute('''SELECT scin FROM plants WHERE user_id=?''', (plant_id,))
    numb = cursor.fetchone()  
    connection.commit()
    if numb and numb[0] == 1:
        return "https://i.pinimg.com/736x/3d/ee/38/3dee387811ad501b3060d121d73d7a06.jpg"
    elif numb and numb[0] == 2:
        return "https://i.pinimg.com/736x/1f/1f/27/1f1f274c006d6ec1f586dee83f2ffbbb.jpg"
    elif numb and numb[0] == 3:
        return "https://i.pinimg.com/736x/d2/e5/0c/d2e50c00ed009b357605f9bd085cd45a.jpg"
    elif numb and numb[0] == 4:
        return "https://i.pinimg.com/736x/f1/47/1b/f1471b6adde5f4ffef281314a5704f74.jpg"
    else:
        return "https://i.pinimg.com/736x/3d/ee/38/3dee387811ad501b3060d121d73d7a06.jpg"
    
def plant_s(plant_id):
    cursor.execute('''SELECT scin FROM plants WHERE user_id=?''', (plant_id,))
    numb = cursor.fetchone()     
    connection.commit()
    if numb and numb[0] == 1:
        return "–¶–≤–µ—Ç–æ–∫üåº"
    elif numb and numb[0] == 2:
        return "–£–ª—ã–±–∞—à–∫–∞ü§£"
    elif numb and numb[0] == 3:
        return "–ó–µ–ª—ë–Ω—ã–πüåø"
    elif numb and numb[0] == 4:
        return "–£–∂–∞—Å–Ω—ã–πüòàüõë"
    else:
        return "–¢–∞–∫–æ–≥–æ —Å–∫–∏–Ω–∞ –Ω–µ—Ç –≤ –∏–≥—Ä–µ"
    

@bot.message_handler(commands=['start'])
def welcome(message):
    markup = generate_menu()
    chat_id = message.chat.id
    markup = generate_menu() 
    
    if not you_user(chat_id):
        welcome_user(chat_id)
        response_text = f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Plants lite ü§©! –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –≠—Ç–∞ —Å—ã–ª–∫–∞ –Ω–∞ –º–æ–π –∫–∞–Ω–∞–ª https://t.me/+l9RHgfjX-Y1kZTVi /help - —ç—Ç–æ –ø–æ–º–æ—â—å"
    else:
        response_text = f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–ºü§©!"

    start_update_timer(chat_id)
    bot.send_photo(chat_id=chat_id, photo='https://avatars.mds.yandex.net/i?id=f92473652c7adf131c2af4a6d454b28d854c1a63-5233182-images-thumbs&n=13',caption=response_text, reply_markup=markup)
    bot.send_sticker(chat_id, "CAACAgIAAxkBAAEOa0poGaNY8B2KTQGnhTqxHQ2y1vgCvAACjwEAAladvQqTBL2ODiSRxjYE")

@bot.message_handler(commands=['help'])
def help(message):
    markup = generate_menu()
    chat_id = message.chat.id
    text_help = (   
        '–ü—Ä–∏–≤–µ—Ç-–ø—Ä–∏–≤–µ—Ç! üñêÔ∏èüèªüåø –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º —Ç–µ–±—è –≤ –Ω–∞—à–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–º –º–∏—Ä–µ –∑–µ–ª—ë–Ω—ã—Ö –ª—é–±–∏–º—Ü–µ–≤! üåµüí® –≠—Ç–æ –±–µ—Ç–∞ –≤–µ—Ä—Å–∏—è\n\n'

        '–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã:\n'
        '–¢—ã –≤—ã—Ä–∞—â–∏–≤–∞–µ—à—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ, –∑–∞–±–æ—Ç–∏—à—å—Å—è –æ –Ω—ë–º, —É—Ö–∞–∂–∏–≤–∞–µ—à—å –∏ —Å–æ–±–∏—Ä–∞–µ—à—å —É—Ä–æ–∂–∞–π. –ß–µ–º –ª—É—á—à–µ —É—Ö–æ–¥, —Ç–µ–º —Å—á–∞—Å—Ç–ª–∏–≤–µ–µ –∏ –±–æ–≥–∞—á–µ —Ç—ã —Å—Ç–∞–Ω–µ—à—å! üåºüí∞\n\n'

        '–ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:\n'
        '–ö–æ–º–∞–Ω–¥–∞	–î–µ–π—Å—Ç–≤–∏–µ	–°–º–∞–π–ª–∏–∫\n'
        '/start	–ù–∞—á–∏–Ω–∞–µ—Ç –∏–≥—Ä—É –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞.	üåøüöÄ\n'
        '/status	–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Ä–∞—Å—Ç–µ–Ω–∏—è (—É—Ä–æ–≤–µ–Ω—å, –≤–ª–∞–∂–Ω–æ—Å—Ç—å, –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ, –º–æ–Ω–µ—Ç—ã).	üìäüí¨\n'
        '/water	–ü–æ–ª–∏–≤–∞–µ—Ç —Ä–∞—Å—Ç–µ–Ω–∏–µ –≤–æ–¥–æ–π, –ø–æ–≤—ã—à–∞–µ—Ç –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å –≤–ª–∞–∂–Ω–æ—Å—Ç–∏.	üíßüåä\n'
        '/dog	–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–∏—Å–∫ –º–æ–Ω–µ—Ç —Å –ø–æ–º–æ—â—å—é —Å–æ–±–∞–∫–∏-–ø–æ–º–æ—â–Ω–∏–∫–∞.	üêïüí∞\n'
        '/shop	–ü–æ–∫—É–ø–∞–µ—Ç –ø–æ–ª–µ–∑–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –∑–¥–æ—Ä–æ–≤—å—è –∏ —Ä–æ—Å—Ç–∞ —Ä–∞—Å—Ç–µ–Ω–∏—è.	üõíüåπ\n'
        '/help	–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É –ø–æ –∏–≥—Ä–µ –∏ –¥–æ—Å—Ç—É–ø–Ω—ã–º –∫–æ–º–∞–Ω–¥–∞–º.	üìùüîç\n'
        '–ú–µ—Ö–∞–Ω–∏–∑–º –≤—ã—Ä–∞—â–∏–≤–∞–Ω–∏—è –∏ –∑–∞—Ä–∞–±–æ—Ç–∫–∞:\n'
        '–†–æ—Å—Ç —Ä–∞—Å—Ç–µ–Ω–∏—è: –ß–µ–º –≤—ã—à–µ —É—Ä–æ–≤–µ–Ω—å —Ä–∞—Å—Ç–µ–Ω–∏—è, —Ç–µ–º –±–æ–ª—å—à–µ –ø–ª–æ–¥–æ–≤ –æ–Ω–æ –ø—Ä–∏–Ω–æ—Å–∏—Ç –∏ —Ç–µ–º –±–æ–ª—å—à–µ –¥–µ–Ω–µ–≥ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è. üåªüí≤\n'
        '–°–±–æ—Ä —É—Ä–æ–∂–∞—è: –ö–∞–∂–¥—ã–µ —Å—É—Ç–∫–∏ –ø—Ä–æ–≤–æ–¥–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–±–æ—Ä —É—Ä–æ–∂–∞—è –≤ 13:00, –∫–æ—Ç–æ—Ä—ã–π —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç –∏ –ø–æ–¥–Ω–∏–º–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å —Ä–∞—Å—Ç–µ–Ω–∏—è. üåΩüéÅ\n'
        '–ú–æ–Ω–µ—Ç—ã: –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è –ø–æ–∫—É–ø–æ–∫ –ø–æ–ª–µ–∑–Ω—ã—Ö –≤–µ—â–µ–π –≤ –º–∞–≥–∞–∑–∏–Ω–µ. üí∞üõí\n'
        '–£—Ä–æ–≤–µ–Ω—å —Ä–∞—Å—Ç–µ–Ω–∏—è: –ü–æ–≤—ã—à–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —É–¥–∞—á–Ω–æ–≥–æ —Å–±–æ—Ä–∞ —É—Ä–æ–∂–∞—è. üéáüå∫\n'
        '–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏:\n'
        '–°–æ–±–∞–∫–∏ –ø–æ–º–æ—â–Ω–∏–∫–∏: –û–Ω–∏ –ø–æ–º–æ–≥–∞—é—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å —Å–∫—Ä—ã—Ç—ã–µ —Å–æ–∫—Ä–æ–≤–∏—â–∞ –∏ —É–≤–µ–ª–∏—á–∏–≤–∞—Ç—å –∑–∞–ø–∞—Å—ã –º–æ–Ω–µ—Ç. üêïüí∞\n'
        '–ú–∞–≥–∞–∑–∏–Ω: –ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã, —É–ª—É—á—à–∞—é—â–∏–µ –∂–∏–∑–Ω—å —Ä–∞—Å—Ç–µ–Ω–∏—è. üõíüåº\n'
        '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–ª–∏–≤: –ï—Å–ª–∏ –∑–∞–±—É–¥–µ—à—å –≤–æ–≤—Ä–µ–º—è –ø–æ–ª–∏—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏–µ, –æ–Ω–æ –Ω–∞—á–Ω—ë—Ç —Å—Ç—Ä–∞–¥–∞—Ç—å, –∞ –∑–Ω–∞—á–∏—Ç, —Å–Ω–∏–∑—è—Ç—Å—è —à–∞–Ω—Å—ã –≤—ã—Ä–∞—Å—Ç–∏—Ç—å –±–æ–ª—å—à–æ–π —É—Ä–æ–∂–∞–π. üíßüå≥\n'
        '–ó–∞–±–æ—Ç—å—Å—è –æ —Å–≤–æ–µ–º —Ä–∞—Å—Ç–µ–Ω–∏–∏, —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏—Ä—É–π –∏ –Ω–∞—Å–ª–∞–∂–¥–∞–π—Å—è —Ä–æ—Å—Ç–æ–º –±–æ–≥–∞—Ç—Å—Ç–≤–∞ –∏ —Å—á–∞—Å—Ç—å—è! üå≥üåü\n'
    )
    bot.send_message(chat_id=chat_id, text=text_help, reply_markup=markup )
    bot.send_sticker(chat_id, "CAACAgIAAxkBAAEOguxoKKy0jwo6GlZ2jhGyAAGZfvgRppAAAqcBAAJWnb0Ks0y7N8sBoXA2BA")

lock = threading.Lock()

@bot.message_handler(commands=['status'])
def status_command (message):
    chat_id = message.chat.id
    data_dict = data_select(chat_id)
    markup = generate_menu()
    photo = plant_p(chat_id)
    scin = plant_s(chat_id)
    text_status = (
    f"‚≠ê –í–ê–® –°–¢–ê–¢–£–° ‚≠ê \n"
    f"üî¥ –¢–≤–æ–π ID: {data_dict['id']}  \n"
    f"üî∂ üåø  ID —Ä–∞—Å—Ç–µ–Ω–∏—è: {data_dict['user_id']}  \n"
    f"üåº üíß –í–æ–¥–∞: {data_dict['water']}%  \n"
    f"üéá –£—Ä–æ–≤–µ–Ω—å: {data_dict['level']}  \n"
    f"üé≠ –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {data_dict['mood']}% \n"
    f"üí∞ –ú–æ–Ω–µ—Ç–∫–∏: {data_dict['points']}   \n"
    f"üéÄ–¶–≤–µ—Ç–æ–∫ : {scin}\n"
    "üéÑ –°–ª–µ–¥–∏—Ç–µ –∑–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏!"
    )
    bot.send_message(chat_id=chat_id, text=text_status, reply_markup=markup )
    bot.send_sticker(chat_id, "CAACAgIAAxkBAAEObBFoGeivGKNXO5qLU58mdDeJ1NbN9QACpQEAAladvQqGK_PpTO07ZTYE")
    level = int(data_dict['level'])  
    markup = generate_menu()
    bot.send_photo(
        chat_id=chat_id,
        photo=photo,
        caption=f"–¶–≤–µ—Ç–æ–∫ {scin} –£—Ä.{level}üéá",
        reply_markup=markup
    )
    p = 0
    for _ in range(level):
        bot.send_photo(
            chat_id=chat_id,
            photo='https://i.pinimg.com/736x/73/1c/0c/731c0cab2d76ff284e870cbb7bf8e373.jpg',
            caption=" ",
            reply_markup=markup
        )
        p  += 1
        if p > 10:
            bot.send_photo(
                chat_id=chat_id,
                photo='https://i.pinimg.com/736x/73/1c/0c/731c0cab2d76ff284e870cbb7bf8e373.jpg',
                caption="–≤–∞—É —Ä–∞—Å—Ç–µ–Ω–∏–µ —Ç–∞–∫–æ–µ –æ–≥—Ä–æ–º–Ω–æ–µ —á—Ç–æ —É –º–µ–Ω—è –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å —Ñ–æ—Ç–∫–∏ üòÄ",
                reply_markup=markup
            )
            break

@bot.message_handler(commands=['water'])
def water(message):
    markup = generate_menu()
    chat_id = message.chat.id
    data = data_select(chat_id)

    if isinstance(data, str):
        bot.send_message(chat_id=chat_id, text=data, reply_markup=markup)
        return

    current_water = data["water"]
    bot.send_message(chat_id=chat_id, text=f"–£—Ä–æ–≤–µ–Ω—å –≤–æ–¥—ã –≤ —Ä–∞—Å—Ç–µ–Ω–∏–∏ {current_water}%üíßüòÄ", reply_markup=markup)

    if current_water == 100:
        bot.send_message(chat_id=chat_id, text=f"–í–∞—à–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ –Ω–µ –Ω—É–∂–¥–∞–µ—Ç—Å—è –≤ –≤–æ–¥–µüòÄüåº", reply_markup=markup)
    else:
        updated_water = 100
        data_update(updated_water, data["level"], data["points"], data["mood"], data["id"])
        bot.send_message(chat_id=chat_id, text=f"–£—Ä–æ–≤–µ–Ω—å –≤–æ–¥—ã –≤ —Ä–∞—Å—Ç–µ–Ω–∏–∏ –ø–æ–ø–æ–ª–Ω–µ–Ωüåº {updated_water}%üíßüòÄ", reply_markup=markup)

@bot.message_handler(commands=['shop'])
def shop (message):
    chat_id = message.chat.id
    data = data_select(chat_id)
    current_point = data["points"]
    bot.send_message(chat_id=chat_id, text=f"–£ –≤–∞—Å {current_point}üí∞ –º–æ–Ω–µ—Ç üòÄ \n–£ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ —Å–≤–æ—ë —Å–≤–æ–π—Å—Ç–≤–æ ü§©\n–í–æ—Ç –≤–µ—Å—å –∞—Å–æ—Ä—Ç–∏–º–µ–Ω—ÇüëÅ‚Äçüó®", reply_markup=shop_menu())

@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    chat_id = call.message.chat.id
    data_shop = call.data
    data = data_select(chat_id)
    current_point = data["points"]
    current_mood = data["mood"]
    update_mood = current_mood

    if current_point >= 25:
        lock.acquire() 

        try:

            if data_shop == "Rainbow_ray":
                update_mood = 80
                shop1(chat_id)
            elif data_shop == "Warm_Rain":
                update_mood = 81
                shop3(chat_id)
            elif data_shop == "Sunstroke":
                update_mood = 80
                shop2(chat_id)
            elif data_shop == "VIP":
                if current_point >= 99:
                    update_mood = 99
                    update_point = current_point - 74
                    shop4(chat_id)
                else:
                    bot.edit_message_text(chat_id=chat_id, message_id=call.message.message_id, text="–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç–æ–∫ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ üåº!")
                    bot.send_sticker(chat_id, "CAACAgIAAxkBAAEOgP1oJ23Broxg3oXNldf85M2-vCdM7AAClQEAAladvQp2JZLWwRjgLDYE")

            bot.edit_message_text(chat_id=chat_id, message_id=call.message.message_id, text="–ü–æ–¥–æ–∂–¥–∏—Ç–µ –ø–æ–∫—É–ø–∫–∞ —Å–æ–≤–µ—Ä—à–∞–µ—Ç—Å—è üåº!")
            update_point = current_point - 25
            data_update(data["water"], data["level"], update_point, update_mood, data["id"])
            
        finally:
            lock.release()  
    else:
        bot.edit_message_text(chat_id=chat_id, message_id=call.message.message_id, text="–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç–æ–∫ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ üåº!")
        bot.send_sticker(chat_id, "CAACAgIAAxkBAAEOgP1oJ23Broxg3oXNldf85M2-vCdM7AAClQEAAladvQp2JZLWwRjgLDYE")

def shop1(chat_id):
    bot.send_message(chat_id=chat_id, text="–í—ã –∫—É–ø–∏–ª–∏ —Ä–∞–¥—É–≥—É! üåà")
    bot.send_animation(chat_id, animation='https://steamuserimages-a.akamaihd.net/ugc/97233690491092121/44BEC54EB389960A035A45AAF300865964F723D5/?imw=512&amp;imh=305&amp;ima=fit&amp;impolicy=Letterbox&amp;imcolor=%23000000&amp;letterbox=true', caption='–Ø –†–ê–î–£–ì–ê')
def shop3(chat_id):
    bot.send_message(chat_id=chat_id, text="–í—ã –∫—É–ø–∏–ª–∏ –¥–æ–∂–¥–∏–∫! üåßÔ∏è")
    bot.send_animation(chat_id, animation='https://content.foto.my.mail.ru/community/blog_vitalderov/_groupsphoto/h-18078.jpg', caption="–î–æ–∂–¥–∏–∫ !")
def shop2(chat_id):
    bot.send_message(chat_id=chat_id, text="–í—ã –∫—É–ø–∏–ª–∏ —Å–æ–ª–Ω–µ—á–Ω—ã–π —Å–≤–µ—Ç! ‚òÄÔ∏è")
    bot.send_animation(chat_id, animation='https://media1.tenor.com/m/pknwZ7GL8qAAAAAd/yetee-the-yetee.gif', caption='–≠–π —Ö–æ—á–µ—à—å –∫–æ–Ω—Ñ–µ—Ç–∫—É...')
def shop4(chat_id):
    bot.send_photo(
        chat_id=chat_id,
        photo='https://i.pinimg.com/736x/19/57/0e/19570ee43d8b7ee0fa5d6f4213b76dfc.jpg',
        caption=f"–í–∞—à–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ –ø–æ–ª—É—á–∏–ª–æ —Å–æ–ª–Ω—Ü–µ‚òÄÔ∏è"
    )
 
USER_STATES = {}

@bot.message_handler(commands=['flowers'])
def scins(message):
    chat_id = message.chat.id
    scins = plant_all_s(chat_id)
    USER_STATES[chat_id] = "choosing_scin"  
    bot.send_message(chat_id, f"–£ –≤–∞—Å {scins} —Å–∫–∏–Ω–æ–≤ –Ω–∞ —Ü–≤–µ—Ç–æ—á–µ–∫ üéÄüòÄ \n–ê —Ç–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–∫–∏–Ω–∞ –≤–æ—Ç —Ç–∞–∫ (—Ü–≤–µ—Ç–æ–∫ 1)ü§©")
    bot.send_sticker(chat_id, "CAACAgIAAxkBAAEOhPhoKrWcqHEvkRW0fPXwGW7xF350MwACrgEAAladvQqAXIyr2L0TUjYE")

@bot.message_handler(func=lambda message: USER_STATES.get(message.chat.id) == "choosing_scin")
def choose_scin(message):
    chat_id = message.chat.id
    del USER_STATES[chat_id]  
    text = message.text.strip().lower()
    scin_all = plant_all_s(chat_id)

    if text.startswith("—Ü–≤–µ—Ç–æ–∫"): 
        parts = text.split()  
        if len(parts) > 1: 
            try:
                chosen_number = int(parts[1])  
                if chosen_number <= scin_all:
                    scining = chosen_number
                    bot.send_message(chat_id, f"–í—ã–±—Ä–∞–Ω —Å–∫–∏–Ω ‚Ññ{scining}, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ...")
                    cursor.execute("UPDATE plants SET scin=? WHERE user_id=?", (scining, chat_id,))
                    connection.commit()  
                    
                    cursor.execute('''SELECT scin FROM plants WHERE user_id=?''', (chat_id,))
                    result = cursor.fetchone()  
                    
                    photo = plant_p(chat_id)
                    bot.send_photo(chat_id, photo, caption=f"–ö—Ä–∞—Å–æ—Ç–∞ ‚òÄÔ∏è ")
                    
                    bot.send_message(chat_id, f"–í–´–ë–†–ê–õ–ò {chosen_number}-–π —Å–∫–∏–Ω! üéÄ")
                else:
                    bot.send_message(chat_id, f"–ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–∫–∏–Ω–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞.")
            except ValueError:
                bot.send_message(chat_id, "–ù–æ–º–µ—Ä —Å–∫–∏–Ω–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        else:
            bot.send_message(chat_id, "–í—ã –∑–∞–±—ã–ª–∏ —É–∫–∞–∑–∞—Ç—å –Ω–æ–º–µ—Ä —Å–∫–∏–Ω–∞ –ø–æ—Å–ª–µ —Å–ª–æ–≤–∞ \"—Ü–≤–µ—Ç–æ–∫\". –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    else:
        bot.send_message(chat_id, f"–ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–∞–º –¥–æ—Å—Ç—É–ø–Ω–æ {scin_all} —Å–∫–∏–Ω–æ–≤ –Ω–∞ —Ü–≤–µ—Ç–æ—á–µ–∫ üéÄ. –í—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –Ω–∏—Ö, –Ω–∞–ø—Ä–∏–º–µ—Ä, –≤–æ—Ç —Ç–∞–∫ (—Ü–≤–µ—Ç–æ–∫ 1) –∏–ª–∏ (—Ü–≤–µ—Ç–æ–∫ 2)")

@bot.message_handler(commands=['dog'])
def dog (message):
    chat_id = message.chat.id
    data = data_select(chat_id)
    bot.send_message(chat_id=chat_id, text="–¢—ã –ø–æ–∑–≤–∞–ª —Å–≤–æ—é —Å–æ–±–∞–∫—É üêï\n –¢–≤–æ—è —Å–æ–±–∞–∫–∞ –º–æ–∂–µ—Ç –Ω–∞–π—Ç–∏ –º–æ–Ω–µ—Ç–∫–∏  üí™.–≠—Ç–æ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —É–¥–∞—á–∏ ,üçÄ—à–∞–Ω—Å —á—Ç–æ —Ç–≤–æ—è —Å–æ–±–∞–∫–∞ –Ω–∞–π–¥—ë—Ç –º–æ–Ω–µ—Ç–∫–∏ —Ä–∞–≤–Ω–∞ 30%ü§£.\n –ü–æ–¥–æ–∂–¥–∏—Ç–µ 30 —Å–µ–∫—É–Ω–¥")
    bot.send_sticker(chat_id, "CAACAgIAAxkBAAEOggxoKBlCBwskPv-HJuXxx9ysWTUtIAACXgADrWW8FLy_0yJMyvjLNgQ")
    lock.acquire() 

    try:
        dog_points = random.randint(0, 10)
        current_point = data["points"]
        time.sleep(30)
        if dog_points > 6:
            update_points2 = current_point + 15
            bot.send_message(chat_id=chat_id, text="–í–∞—à–∞ —Å–æ–±–∞–∫–∞ ... \n\n–ù–ê–®–õ–ê –ú–û–ù–ï–¢–ö–òüîé  –≤–∞–º –ø—Ä–∏–±–∞–≤–∏–ª–æ—Å—å 15+ –º.")
            bot.send_animation(chat_id, animation='https://telepot.ru/images/stickers_img/dae260ddf9.gif', caption="–£–†–ê !")
        else:
            update_points2 = current_point 
            bot.send_message(chat_id=chat_id, text="–í–∞—à–∞ —Å–æ–±–∞–∫–∞ ... \n\n–ù–ï –ù–ê–®–õ–ê –ú–û–ù–ï–¢–ö–òüîé  –≤–∞–º –ø—Ä–∏–±–∞–≤–∏–ª–æ—Å—å 0+ –º.üåßÔ∏è")
            bot.send_animation(chat_id, animation='https://media.tenor.com/9sPQlkbGzDQAAAAC/sad-emote.gif', caption="–ù–µ—Ç !")
        data_update(data["water"], data["level"], update_points2, data["mood"], data["id"])
    finally:
        lock.release()
    
if __name__ == '__main__':
    bot.infinity_polling()
